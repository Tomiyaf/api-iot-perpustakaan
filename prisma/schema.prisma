// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Format: postgresql://user:password@host:port/database
}

// ENUM Definitions
enum TagType {
  book
  member
}

enum TagStatus {
  registered
  unregistered
}

enum TransactionStatus {
  borrowed
  returned
}

// Models

model RfidTag {
  id         Int       @id @default(autoincrement())
  uid        String?   @unique
  type       TagType?
  status     TagStatus?
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  book       Book?
  member     Member?

  @@map("rfid_tag")
}

model Book {
  id          Int          @id @default(autoincrement())
  title       String
  author      String
  publishYear Int          @map("publish_year")
  isbn        String       @unique
  createdAt   DateTime?    @default(now()) @map("created_at")
  updatedAt   DateTime?    @updatedAt @map("updated_at")

  rfidTagId   Int          @unique @map("rfid_tag_id")
  rfidTag     RfidTag      @relation(fields: [rfidTagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  transactions Transaction[]

  @@map("book")
}

model Member {
  id        Int          @id @default(autoincrement())
  name      String?
  memberId  String?      @map("member_id")
  createdAt DateTime?    @default(now()) @map("created_at")
  updatedAt DateTime?    @updatedAt @map("updated_at")

  rfidTagId Int          @unique @map("rfid_tag_id")
  rfidTag   RfidTag      @relation(fields: [rfidTagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  transactions Transaction[]

  @@map("member")
}

model Admin {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("admin")
}

model Transaction {
  id         Int                @id @default(autoincrement())
  borrowDate DateTime?         @map("borrow_date")
  returnDate DateTime?         @map("return_date")
  status     TransactionStatus?

  bookId     Int               @map("book_id")
  memberId   Int               @map("member_id")

  book       Book              @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  member     Member            @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("transaction")
}
